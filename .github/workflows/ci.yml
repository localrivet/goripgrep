name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.22', '1.23', '1.24']
        arch: [amd64]
        include:
          # ARM64 testing on macOS and Linux
          - os: ubuntu-latest
            go-version: '1.24'
            arch: arm64
          - os: macos-latest
            go-version: '1.24'
            arch: arm64
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-${{ matrix.arch }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.arch }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-${{ matrix.arch }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      env:
        GOARCH: ${{ matrix.arch }}
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Run benchmarks
      env:
        GOARCH: ${{ matrix.arch }}
      run: go test -bench=. -benchmem ./...

    - name: Build CLI
      env:
        GOARCH: ${{ matrix.arch }}
      run: go build -o goripgrep${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./cmd/goripgrep

    - name: Test CLI functionality (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ./goripgrep --version
        ./goripgrep "package search" . | head -5
        ./goripgrep --stats "func" . 
        ./goripgrep --json "test" . | head -10

    - name: Test CLI functionality (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\goripgrep.exe --version
        .\goripgrep.exe "package search" . 
        .\goripgrep.exe --stats "func" .
        .\goripgrep.exe --json "test" .

    - name: Run linter
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24' && matrix.arch == 'amd64'
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24' && matrix.arch == 'amd64'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build-cross-platform:
    name: Cross-Platform Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist/${{ matrix.goos }}-${{ matrix.goarch }}
        BINARY_NAME=goripgrep
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags="-s -w" -o dist/${{ matrix.goos }}-${{ matrix.goarch }}/${BINARY_NAME} ./cmd/goripgrep

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: goripgrep-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/${{ matrix.goos }}-${{ matrix.goarch }}/

  integration-test:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Create test files with various encodings
      run: |
        mkdir -p test-data
        echo "Hello World" > test-data/ascii.txt
        echo "Hello 世界" > test-data/utf8.txt
        echo "# Comment" > test-data/.hidden
        echo "*.tmp" > test-data/.gitignore
        echo "temporary file" > test-data/temp.tmp

    - name: Build and test CLI with real data
      run: |
        go build -o goripgrep${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./cmd/goripgrep
        
    - name: Test file filtering (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        # Test gitignore functionality
        ./goripgrep "temporary" test-data/ || echo "Gitignore working - temp.tmp ignored"
        
        # Test file pattern filtering
        ./goripgrep -g "*.txt" "Hello" test-data/
        
        # Test hidden file handling
        ./goripgrep "Comment" test-data/ --include-hidden || echo "Hidden files excluded by default"
        
        # Test Unicode support
        ./goripgrep "世界" test-data/
        
        # Test case insensitive
        ./goripgrep -i "HELLO" test-data/

    - name: Test file filtering (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Test file pattern filtering
        .\goripgrep.exe -g "*.txt" "Hello" test-data\
        
        # Test Unicode support
        .\goripgrep.exe "世界" test-data\
        
        # Test case insensitive
        .\goripgrep.exe -i "HELLO" test-data\

    - name: Performance test
      run: |
        # Create larger test file
        for i in {1..1000}; do echo "Line $i with some test content and patterns"; done > test-data/large.txt
        
    - name: Performance test execution (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        # Test performance on larger file
        time ./goripgrep "test" test-data/large.txt
        ./goripgrep bench "test" test-data/

    - name: Performance test execution (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Test performance on larger file
        .\goripgrep.exe "test" test-data\large.txt
        .\goripgrep.exe bench "test" test-data\ 